N_MATCHES = nrow(data),
N_CLUSTERS = 5,
N_MATCHES_PER_TEAM = 38,
y = data),
chains = 1) -> unid
rstan::sampling(unidentified_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_CLUSTERS = 5,
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> unid
uid
unid
ndp_poisson = rstan::stan_model(file = "2018-06-05-NDP/ndp_poisson.stan",
model_name = "ndp_poisson")
unidentified_poisson = rstan::stan_model(file = "2018-06-05-NDP/unidentified_poisson.stan",
model_name = "simple_poisson")
rstan::sampling(unidentified_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_CLUSTERS = 5,
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> unid
unidentified_poisson = rstan::stan_model(file = "2018-06-05-NDP/unidentified_poisson.stan",
model_name = "simple_poisson")
rstan::sampling(unidentified_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_CLUSTERS = 5,
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> unid
rstan::sampling(unidentified_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_CLUSTERS = 5,
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> unid
unidentified_poisson = rstan::stan_model(file = "2018-06-05-NDP/unidentified_poisson.stan",
model_name = "unidentified_poisson")
rstan::sampling(unidentified_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_CLUSTERS = 5,
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> unid
uniod
unid
rstan::extract(unid)$attack_mean
colMeans(rstan::extract(unid)$attack_mean)
colMeans(rstan::extract(unid)$defense_mean)
unidentified_poisson = rstan::stan_model(file = "2018-06-05-NDP/unidentified_poisson.stan",
model_name = "unidentified_poisson")
unidentified_poisson = rstan::stan_model(file = "2018-06-05-NDP/unidentified_poisson.stan",
model_name = "unidentified_poisson")
unidentified_poisson = rstan::stan_model(file = "2018-06-05-NDP/unidentified_poisson.stan",
model_name = "unidentified_poisson")
rstan::sampling(unidentified_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_CLUSTERS = 5,
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> unid
unid
colMeans(rstan::extract(unid)$attack_mean)
colMeans(rstan::extract(unid)$defense_mean)
levels(cleaned$HomeTeam)
attacks = setName(colMeans(rstan::extract(unid)$attack_mean), levels(cleaned$HomeTeam))
attacks = setNames(colMeans(rstan::extract(unid)$attack_mean), levels(cleaned$HomeTeam))
attacks
barplot(attacks)
barplot(sort(attacks))
colMeans(rstan::extract(unid)$attack_grand_mean)
(rstan::extract(unid)$attack_grand_mean)
mean(rstan::extract(unid)$attack_grand_mean)
mean(rstan::extract(unid)$defense_grand_mean)
attacks = setNames(colMeans(rstan::extract(unid)$attack_mean), levels(cleaned$HomeTeam))
defense = setNames(colMeans(rstan::extract(unid)$defense_mean), levels(cleaned$HomeTeam))
barplot(sort(defense))
barplot(attack - defense)
barplot(attacks - defense)
attacks - defense
levels(cleaned$HomeTeam)
hist(colMeans(rstan::extract(unid)$attack[12, ]))
hist(rstan::extract(unid)$attack[12, ])
rstan::extract(unid)$attack[12, ]
rstan::extract(unid)$attack
rstan::extract(unid)$attack[, 12]
(rstan::extract(unid)$attack)[, 12]
(rstan::extract(unid)$attack)[, , 12]
hist(rstan::extract(unid)$attack[, 12, ])
hist(rstan::extract(unid)$attack[, 1, ])
hist(rstan::extract(unid)$attack[, 13, ])
rstan::extract(unid)$homefield
mean(rstan::extract(unid)$homefield)
hist(rstan::extract(unid)$homefield)
hierarchical_poisson = rstan::stan_model(file = "2018-06-05-NDP/hierarchical_poisson.stan",
model_name = "hierarchical_poisson")
hierarchical_poisson = rstan::stan_model(file = "2018-06-05-NDP/hierarchical_poisson.stan",
model_name = "hierarchical_poisson")
rstan::sampling(unidentified_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> unid
rstan::sampling(hierarchical_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> unid
rstan::extract(unid)$attack_mean
colMeans(rstan::extract(unid)$attack_mean)
colMeans(rstan::extract(unid)$homefield)
colMeans(rstan::extract(unid)$awayfield)
hierarchical_poisson = rstan::stan_model(file = "2018-06-05-NDP/hierarchical_poisson.stan",
model_name = "hierarchical_poisson")
rstan::sampling(hierarchical_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> hierarchical
colMeans(rstan::extract(hierarchical)$awayfield)
colMeans(rstan::extract(hierarchical)$homefieldfield)
colMeans(rstan::extract(hierarchical)$homefield)
hierarchical_poisson = rstan::stan_model(file = "2018-06-05-NDP/hierarchical_poisson.stan",
model_name = "hierarchical_poisson")
rstan::sampling(hierarchical_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> hierarchical
colMeans(rstan::extract(hierarchical)$homefield)
hist(rstan::extract(hierarchical)$homefield)
plot(colMeans((rstan::extract(hierarchical)$homefield)))
levels(cleaned$HomeTeam)
attack = setNames(colMeans(rstan::extract(unid)$attack_mean), levels(cleaned$HomeTeam))
defense = setNames(colMeans(rstan::extract(unid)$defense_mean), levels(cleaned$HomeTeam))
homefield = setNames(colMeans(rstan::extract(unid)$homefield), levels(cleaned$HomeTeam))
homefield
attack = setNames(colMeans(rstan::extract(hierarchical)$attack_mean), levels(cleaned$HomeTeam))
defense = setNames(colMeans(rstan::extract(hierarchical)$defense_mean), levels(cleaned$HomeTeam))
homefield = setNames(colMeans(rstan::extract(hierarchical)$homefield), levels(cleaned$HomeTeam))
homefield
plot(homefield, attack)
cor(homefield, attack)
cor(homefield, defense)
plot(homefield, defense)
defense
homefield
plot(homefield)
sd = apply(rstan::extract(hierarchical)$homefield, 2, quantile(0.1))
quant10 = apply(rstan::extract(hierarchical)$homefield, 2, function(x) quantile(x, c(0.1)))
median = apply(rstan::extract(hierarchical)$homefield, 2, function(x) quantile(x, c(0.5)))
quant90 = apply(rstan::extract(hierarchical)$homefield, 2, function(x) quantile(x, c(0.9)))
plot(median)
lines(quant10)
lines(quant90)
quant10
quant10 = apply(rstan::extract(hierarchical)$homefield, 2, function(x) quantile(x, c(0.1)))
median = apply(rstan::extract(hierarchical)$homefield, 2, function(x) quantile(x, c(0.5)))
quant90 = apply(rstan::extract(hierarchical)$homefield, 2, function(x) quantile(x, c(0.9)))
plot(median, ylim = c(0, 1))
lines(quant10)
lines(quant90)
quant10 = apply(rstan::extract(hierarchical)$homefield, 2, function(x) quantile(x, c(0.1)))
median = apply(rstan::extract(hierarchical)$homefield, 2, function(x) quantile(x, c(0.5)))
quant90 = apply(rstan::extract(hierarchical)$homefield, 2, function(x) quantile(x, c(0.9)))
plot(median, ylim = c(0, 0.6))
lines(quant10)
lines(quant90)
median
homefield
cleaned
season
##  Dynamic model
## =============================================================================
season %>%
select(HomeTeam, AwayTeam, Season, FTHG, FTAG, Date) %>%
mutate(HomeTeam = as.factor(HomeTeam),
AwayTeam = as.factor(AwayTeam),
HomeInt  = as.integer(as.numeric(HomeTeam, levels = HomeTeam)),
AwayInt  = as.integer(as.numeric(AwayTeam, levels = AwayTeam))) %>%
rename(HomeGoals = FTHG,
AwayGoals = FTAG) ->
cleaned
cleaned
season %>%
select(HomeTeam, AwayTeam, Season, FTHG, FTAG, Date) %>%
mutate(HomeTeam = as.factor(HomeTeam),
AwayTeam = as.factor(AwayTeam),
HomeInt  = as.integer(as.numeric(HomeTeam, levels = HomeTeam)),
AwayInt  = as.integer(as.numeric(AwayTeam, levels = AwayTeam))) %>%
rename(HomeGoals = FTHG,
AwayGoals = FTAG) %>%
mutate(Date = lubridate::decimal_date(Date)->
cleaned
## =============================================================================
##  Dynamic model
## =============================================================================
season %>%
select(HomeTeam, AwayTeam, Season, FTHG, FTAG, Date) %>%
mutate(HomeTeam = as.factor(HomeTeam),
AwayTeam = as.factor(AwayTeam),
HomeInt  = as.integer(as.numeric(HomeTeam, levels = HomeTeam)),
AwayInt  = as.integer(as.numeric(AwayTeam, levels = AwayTeam))) %>%
rename(HomeGoals = FTHG,
AwayGoals = FTAG) %>%
mutate(Date = lubridate::decimal_date(Date))->
cleaned
## =============================================================================
##  Dynamic model
## =============================================================================
season %>%
select(HomeTeam, AwayTeam, Season, FTHG, FTAG, Date) %>%
mutate(HomeTeam = as.factor(HomeTeam),
AwayTeam = as.factor(AwayTeam),
HomeInt  = as.integer(as.numeric(HomeTeam, levels = HomeTeam)),
AwayInt  = as.integer(as.numeric(AwayTeam, levels = AwayTeam))) %>%
rename(HomeGoals = FTHG,
AwayGoals = FTAG) %>%
mutate(Date = lubridate::decimal_date(Date))->
cleaned
## =============================================================================
##  Dynamic model
## =============================================================================
season %>%
select(HomeTeam, AwayTeam, Season, FTHG, FTAG, Date) %>%
mutate(HomeTeam = as.factor(HomeTeam),
AwayTeam = as.factor(AwayTeam),
HomeInt  = as.integer(as.numeric(HomeTeam, levels = HomeTeam)),
AwayInt  = as.integer(as.numeric(AwayTeam, levels = AwayTeam))) %>%
rename(HomeGoals = FTHG,
AwayGoals = FTAG) %>%
mutate(Date = lubridate::decimal_date(lubridate::as_date(Date)))->
cleaned
cleaned
cleaned$Date
cleaned
season$Date
lubridate::as_date(season$Date)
?as_date
cleaned
cleaned %>% group_by(HomeTeam)
cleaned %>%
group_by(HomeTeam) %>%
summarise(n())
cleaned %>%
group_by(HomeTeam) %>%
summarise(n = n())
cleaned %>%
group_by(HomeTeam) %>%
summarise(n = n()) %>%
extract(n)
cleaned %>%
group_by(HomeTeam) %>%
summarise(n = n()) %>%
extract2(n)
cleaned %>%
group_by(HomeTeam) %>%
summarise(n = n()) %>%
pull(n)
cleaned %>%
group_by(HomeTeam) %>%
summarise(n = n()) %>%
pull(n) ->
games_played_home
cleaned %>%
group_by(AwayTeam) %>%
summarise(n = n()) %>%
pull(n) ->
games_played_away
games_played = games_played_home + games_played_away
games_played
cleaned %>%
group_by(HomeTeam) %>%
summarise(n = n()) %>%
pull(n) ->
games_played_home
cleaned %>%
group_by(AwayTeam) %>%
summarise(n = n()) %>%
pull(n) ->
games_played_away
games_played = setNames(levels(cleaned$HomeTeam), games_played_home + games_played_away)
cleaned
arrange(cleaned, HomeTeam)
arrange(cleaned, Date, HomeTeam)
arrange(cleaned, HomeTeam, Date)
games_played = setNames(levels(cleaned$HomeTeam), games_played_home + games_played_away)
games_played
games_played = setNames(levels(cleaned$HomeTeam), games_played_home + games_played_away)
string = sapply(1:length(games_played), function(i) paste0("real ", games_played[i], "[", names(games_played)[i], "]"))
string
games_played = setNames(levels(cleaned$HomeTeam), games_played_home + games_played_away)
string = sapply(1:length(games_played), function(i) paste0("real ", games_played[i], "[", names(games_played)[i], "] \n"))
string
string = lapply(1:length(games_played), function(i) paste0("real ", games_played[i], "[", names(games_played)[i], "] \n"))
do.call(paste0, string)
write()
games_played = setNames(levels(cleaned$HomeTeam), games_played_home + games_played_away)
string = lapply(1:length(games_played), function(i) paste0("real ", games_played[i], "[", names(games_played)[i], "]\n"))
write(do.call(paste0, string), "hei.txt")
as.symbyl("Man United")
as.symbol("Man United")
replace
?replace
stringr::str_replace_all("Man United", " ", "_")
stringr::str_replace_all(names(games_played_away), " ", "_")
games_played = setNames(levels(cleaned$HomeTeam), games_played_home + games_played_away)
names(games_played) = sapply(games_played, function(str) stringr::str_replace_all(str, " ", "_"))
string = lapply(1:length(games_played), function(i) paste0("real ", games_played[i], "[", names(games_played)[i], "]\n"))
write(do.call(paste0, string), "hei.txt")
games_played = setNames(levels(cleaned$HomeTeam), games_played_home + games_played_away)
names(games_played) = sapply(games_played, function(str) stringr::str_replace_all(str, " ", "_"))
games_played = setNames(levels(cleaned$HomeTeam), games_played_home + games_played_away)
names(games_played) = sapply(names(games_played), function(str) stringr::str_replace_all(str, " ", "_"))
string = lapply(1:length(games_played), function(i) paste0("real ", games_played[i], "[", names(games_played)[i], "]\n"))
write(do.call(paste0, string), "hei.txt")
games_played = setNames(levels(cleaned$HomeTeam), games_played_home + games_played_away)
names(games_played) = sapply(names(games_played), function(str) stringr::str_replace_all(str, " ", "_"))
games_played
stringr::str_replace_all("Man United", " ", "_")
names(games_played)
cleaned %>%
group_by(HomeTeam) %>%
summarise(n = n()) %>%
pull(n) ->
games_played_home
cleaned %>%
group_by(AwayTeam) %>%
summarise(n = n()) %>%
pull(n) ->
games_played_away
games_played = setNames(levels(cleaned$HomeTeam), games_played_home + games_played_away)
names(games_played) = sapply(names(games_played), function(str) stringr::str_replace_all(str, " ", "_"))
string = lapply(1:length(games_played), function(i) paste0("real ", games_played[i], "[", names(games_played)[i], "]\n"))
write(do.call(paste0, string), "hei.txt")
cleaned %>%
group_by(HomeTeam) %>%
summarise(n = n()) %>%
pull(n) ->
games_played_home
cleaned %>%
group_by(AwayTeam) %>%
summarise(n = n()) %>%
pull(n) ->
games_played_away
games_played = setNames(games_played_home + games_played_away, levels(cleaned$HomeTeam))
names(games_played) = sapply(names(games_played), function(str) stringr::str_replace_all(str, " ", "_"))
string = lapply(1:length(games_played), function(i) paste0("real ", names(games_played)[i], "[", games_played[i], "]\n"))
write(do.call(paste0, string), "hei.txt")
cleaned %>%
group_by(HomeTeam) %>%
summarise(n = n()) %>%
pull(n) ->
games_played_home
cleaned %>%
group_by(AwayTeam) %>%
summarise(n = n()) %>%
pull(n) ->
games_played_away
games_played = setNames(games_played_home + games_played_away, levels(cleaned$HomeTeam))
names(games_played) = sapply(names(games_played), function(str) stringr::str_replace_all(str, " ", "_"))
string = lapply(1:length(games_played), function(i) paste0("real ", names(games_played)[i], "[", games_played[i], "];\n"))
write(do.call(paste0, string), "hei.txt")
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
season %>%
select(HomeTeam, AwayTeam, Season, FTHG, FTAG, Date) %>%
mutate(HomeTeam = as.factor(HomeTeam),
AwayTeam = as.factor(AwayTeam),
HomeInt  = as.integer(as.numeric(HomeTeam, levels = HomeTeam)),
AwayInt  = as.integer(as.numeric(AwayTeam, levels = AwayTeam))) %>%
rename(HomeGoals = FTHG,
AwayGoals = FTAG) %>%
mutate(Date = lubridate::decimal_date(lubridate::as_date(Date)))->
cleaned
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
dynamic
cleaned
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
data
season
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
dynamic
rstan::extract(dynamic)$baseline
rstan::extract(dynamic)$attack[1, 1]
rstan::extract(dynamic)$attack[1, 1, ]
rstan::extract(dynamic)$attack[1, , ]
rstan::extract(dynamic)$attack[, 1, ]
rstan::extract(dynamic)$defense[, 1, ]
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
library("tidyverse")
season1 = readr::read_csv("2018-06-05-NDP/E0.csv")
season1$Season = 2016
season2 = readr::read_csv("2018-06-05-NDP/E0(1).csv")
season2$Season = 2017
season = rbind(season1, season2)
readr::write_csv(season, "PL.csv")
season = readr::read_csv("PL.csv")
season %>%
select(HomeTeam, AwayTeam, Season, FTHG, FTAG) %>%
mutate(HomeTeam = as.factor(HomeTeam),
AwayTeam = as.factor(AwayTeam),
HomeInt  = as.integer(as.numeric(HomeTeam, levels = HomeTeam)),
AwayInt  = as.integer(as.numeric(AwayTeam, levels = AwayTeam))) %>%
rename(HomeGoals = FTHG,
AwayGoals = FTAG) ->
cleaned
data = cleaned[, 4:7]
library("rstan")
rstan_options(auto_write = TRUE)
simple_poisson = rstan::stan_model(file = "2018-06-05-NDP/simple_poisson.stan",
model_name = "simple_poisson")
rstan::sampling(simple_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
y = data))
hierarchical_poisson = rstan::stan_model(file = "2018-06-05-NDP/hierarchical_poisson.stan",
model_name = "hierarchical_poisson")
rstan::sampling(hierarchical_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> hierarchical
## =============================================================================
##  Dynamic model
## =============================================================================
library("rstan")
dynamic_poisson = rstan::stan_model(file = "2018-06-05-NDP/dynamic_poisson.stan",
model_name = "dynamic_poisson")
rstan::sampling(dynamic_poisson, data = list(N_TEAMS = max(data$AwayInt),
N_MATCHES = nrow(data),
N_MATCHES_PER_TEAM = 2*38,
y = data),
chains = 1) -> dynamic
